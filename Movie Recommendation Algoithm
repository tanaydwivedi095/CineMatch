import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import os
from IPython.display import clear_output

class Movie:
    def __init__(self):
        # Used to read the csv file named movies.csv
        self.movies_data =pd.read_csv("C:\\Users\\tanay\\Downloads\\PROJECTS\\PRJ Movie Recommendation System\\movies.csv")
        
    def movie_recommender(self):

        # Used to get the columns that are necessary from movies_data DataFrame
        selected_features = self.movies_data.loc[:,['genres','keywords','tagline','cast','director']]

        # Used to fill the null cells of the selected features
        selected_features = self.nullfiller(selected_features)

        # Creating a combined field of genres, keywords, tagline, cast and director
        combined_features = self.combiner(selected_features)

        # Used to convert text form of combined features into numeric form
        feature_vectors = TfidfVectorizer().fit_transform(combined_features)

        # Find all the similar movie list according to the cosine factors
        similarity = self.similarFinder(feature_vectors)

        # Used to take input from the user
        movie_name = (input(' Enter your favourite movie name : ').lower()).title()

        # used to generate a list will all the names of the movies
        list_of_all_titles = self.allTitle()

        # Used to find common names that are relatable at a percentage between movie input name and all movie names
        find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
        try:
            # Used to extract the exact movie user wanted to enter
            close_match = find_close_match[0]
        except:
            print("Such a movie cannot be found")
            return

        # Used to extract the index to the closest match movie
        index_of_the_movie = self.indexer(close_match)

        # Used to extract the movies that are similar in selected columns
        similarity_score = list(enumerate(similarity[index_of_the_movie]))

        # Sort the similar movies extracted
        sorted_similar_movies = self.sorter(similarity_score) 

        # Used to print the recommended movies
        self.printer(sorted_similar_movies)

    def printer(self,sorted_similar_movies):
        print('Movies suggested for you : \n')
        i = 1
        for movie in sorted_similar_movies:
            index = movie[0]
            title_from_index = self.movies_data[self.movies_data.index==index]['title'].values[0]
            if (i<30):
                print(i, '.',title_from_index)
                i+=1

    def sorter(self, similarity_score):
        return sorted(similarity_score, key = lambda x:x[1], reverse = True)

    def indexer(self, close_match):
        return self.movies_data[self.movies_data.title == close_match]['index'].values[0]

    def nullfiller(self,lst):
        for feature in lst:
            lst[feature] = lst[feature].fillna('')
        return lst

    def similarFinder(self, feature_vectors):
        return cosine_similarity(feature_vectors)

    def combiner(self, selected_features):
        return selected_features['genres']+' '+selected_features['keywords']+' '+selected_features['tagline']+' '+selected_features['cast']+' '+selected_features['director']

    def allTitle(self):
        return list(self.movies_data["title"])



def obj_creator():
    obj = Movie()
    obj.movie_recommender()
    
if __name__=="__main__":
    while True:
        obj_creator()
        choice = input("Do you want to continue (yes or no) :")
        lst = ["y","Y","Yes","YEs","YES","yes","yES","yEs","yeS"]
        if choice not in lst:
            print("Thank You for using the recommender")
            break
        clear_output()
            
